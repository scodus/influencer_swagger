openapi: 3.0.0
info:
  title: Influencer
  description: Influencer
  version: '1.0'
  x-logo:
    url: https://github.com/joolfe/logoBanner.png
    backgroundColor: '#FFFFFF'
    altText: logo
  termsOfService: '#'
  contact:
    name: Scodus
    url: https://scodus.com
    email: scodusnp@gmail.com
  license:
    name: MIT
    url: https://es.wikipedia.org/wiki/Licencia_MIT
servers:
  - url: http://{{url}}
  - url: https://influencer.scodus.com
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    noauthAuth:
      type: http
      scheme: noauth
tags:
  - name: admin
  - name: admin > category
  - name: admin > business
  - name: admin > tag
  - name: admin > language
  - name: admin > channel
  - name: admin > channel content
  - name: influencer
  - name: influencer > user profile
  - name: influencer > category
  - name: influencer > initial price
  - name: influencer > package
  - name: business
  - name: business > user profile
  - name: public
  - name: public > channel
  - name: public > channel content
paths:
  /api/admin/category:
    post:
      tags:
        - admin > category
      summary: create category
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: category 1
                small_image:
                  type: string
                  format: binary
                big_image:
                  type: string
                  format: binary
                description:
                  type: string
                  example: category 1 description
                parent_id:
                  type: string
                  description: nullable
                meta_title:
                  type: string
                  description: nullable
                  example: category 1 meta title
                meta_description:
                  type: string
                  description: nullable
                  example: category 1 meta description
                meta_keyword[]:
                  type: string
                  description: nullable
                  example: keyword 3
                status:
                  type: string
                  description: nullable, active or inactive
                  example: active
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - admin > category
      summary: get all category
      security:
        - bearerAuth: []
      parameters:
        - name: paginate
          in: query
          schema:
            type: string
          description: nullable, 1 to paginate
        - name: page
          in: query
          schema:
            type: string
          description: 'nullable, default 1 '
        - name: limit
          in: query
          schema:
            type: string
          description: nullable, default 10
        - name: search_keyword
          in: query
          schema:
            type: string
          description: nullable
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/category/{slug}:
    post:
      tags:
        - admin > category
      summary: update category
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                _method:
                  type: string
                  example: patch
                title:
                  type: string
                  example: category 1 edit 2
                small_image:
                  type: string
                  format: binary
                big_image:
                  type: string
                  description: nullable
                  format: binary
                description:
                  type: string
                  example: category 1 description edit
                parent_id:
                  type: string
                  description: nullable
                meta_title:
                  type: string
                  example: category 1 meta title edit
                meta_description:
                  type: string
                  example: category 1 meta description edit
                meta_keyword[]:
                  type: string
                  example: keyword 3 edit
                status:
                  type: string
                  description: >-
                    nullable, 1 for active, 2 for inactive. if null status_id =
                    1
                  example: active
      security:
        - bearerAuth: []
      parameters:
        - name: slug
          in: path
          schema:
            type: string
          required: true
          example: category-1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - admin > category
      summary: get single category
      security:
        - bearerAuth: []
      parameters:
        - name: slug
          in: path
          schema:
            type: string
          required: true
          example: category-1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - admin > category
      summary: delete category
      security:
        - bearerAuth: []
      parameters:
        - name: slug
          in: path
          schema:
            type: string
          required: true
          example: category-1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/set-password-mail:
    post:
      tags:
        - admin > business
      summary: register
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: dummysharedmail@gmail.com
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/tag:
    post:
      tags:
        - admin > tag
      summary: create tag
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: tag-1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - admin > tag
      summary: get all tag
      security:
        - bearerAuth: []
      parameters:
        - name: paginate
          in: query
          schema:
            type: string
          description: nullable, 1 to paginate
        - name: page
          in: query
          schema:
            type: string
          description: 'nullable, default 1 '
        - name: limit
          in: query
          schema:
            type: string
          description: nullable, default 10
        - name: search_keyword
          in: query
          schema:
            type: string
          description: nullable
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/tag/{slug}:
    post:
      tags:
        - admin > tag
      summary: update tag
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                _method: patch
                title: tag 1 edit
      security:
        - bearerAuth: []
      parameters:
        - name: slug
          in: path
          schema:
            type: string
          required: true
          example: tag-1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - admin > tag
      summary: get single tag
      security:
        - bearerAuth: []
      parameters:
        - name: slug
          in: path
          schema:
            type: string
          required: true
          example: tag-1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - admin > tag
      summary: delete tag
      security:
        - bearerAuth: []
      parameters:
        - name: slug
          in: path
          schema:
            type: string
          required: true
          example: tag-1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/language:
    post:
      tags:
        - admin > language
      summary: create language
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: language 1
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - admin > language
      summary: get all language
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/language/{slug}:
    post:
      tags:
        - admin > language
      summary: update language
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                _method: patch
                title: language 1 edit
      security:
        - bearerAuth: []
      parameters:
        - name: slug
          in: path
          schema:
            type: string
          required: true
          example: language-1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - admin > language
      summary: get single language
      security:
        - bearerAuth: []
      parameters:
        - name: slug
          in: path
          schema:
            type: string
          required: true
          example: language-1-edit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - admin > language
      summary: delete language
      security:
        - bearerAuth: []
      parameters:
        - name: slug
          in: path
          schema:
            type: string
          required: true
          example: language-1-edit
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/channel:
    get:
      tags:
        - admin > channel
      summary: get all channels
      security:
        - bearerAuth: []
      parameters:
        - name: paginate
          in: query
          schema:
            type: integer
          description: nullable, 1 to paginate
          example: '1'
        - name: page
          in: query
          schema:
            type: string
          description: 'nullable, default 1 '
        - name: limit
          in: query
          schema:
            type: string
          description: nullable, default 10
        - name: search_keyword
          in: query
          schema:
            type: string
          description: nullable
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/channel/{channel_id}/status:
    post:
      tags:
        - admin > channel
      summary: update status
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: active
                _method:
                  type: string
                  example: PUT
      security:
        - bearerAuth: []
      parameters:
        - name: channel_id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /influencer/channel/{channel_id}:
    get:
      tags:
        - admin > channel
      summary: find single channel
      security:
        - bearerAuth: []
      parameters:
        - name: channel_id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/channel-content:
    post:
      tags:
        - admin > channel content
      summary: create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Reels
                channel_id: 1
                status: active
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - admin > channel content
      summary: get all
      security:
        - bearerAuth: []
      parameters:
        - name: paginate
          in: query
          schema:
            type: string
          description: nullable, 1 to paginate
        - name: page
          in: query
          schema:
            type: string
          description: 'nullable, default 1 '
        - name: limit
          in: query
          schema:
            type: string
          description: nullable, default 10
        - name: search_keyword
          in: query
          schema:
            type: string
          description: nullable
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/admin/channel-content/{channel_content_id}:
    post:
      tags:
        - admin > channel content
      summary: update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Reel
                channel_id: 1
                status: active
                _method: PUT
      security:
        - bearerAuth: []
      parameters:
        - name: channel_content_id
          in: path
          schema:
            type: integer
          required: true
          example: '9'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - admin > channel content
      summary: delete
      security:
        - bearerAuth: []
      parameters:
        - name: channel_content_id
          in: path
          schema:
            type: integer
          required: true
          example: '9'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - admin > channel content
      summary: get single
      security:
        - bearerAuth: []
      parameters:
        - name: channel_content_id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/refresh-token/{refresh_token}:
    post:
      tags:
        - admin
      summary: refresh token
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      security:
        - noauthAuth: []
      parameters:
        - name: refresh_token
          in: path
          schema:
            type: string
          required: true
          example: >-
            def502006baf4abc1e466b0c9a0823e72249ff9506c2ccf6276c3dd4df3fe6c81428a34e6335b6d7604a5b0302085ca32fa737d2de2c0ae1b23f1fb6dd6d8dda64e4d7abb72c22db26c1e861ad92835990b8920674fbf3dee9d156d700b3af587d1e7e69d9f4faf91c2c00c17b0acc089d1c67b985c52d9eb20f55efb8fbade717cd5cbe27659958d8925abd7dc9439a365313b527c4c82f7f4df8e667fc6fec1c29a04915057dcca287fe60db727d0df77e1a3a64176884cfe91272b797741d1aec6fb8d6cea45f03ff8b8ea9db2a42d19fdc252a839e5348d1e5f270a4aa17e780246a10c4e312253578b102ee09895e06e25059970eedcdf5ad0346a16ce53b668004631703313e9b359e400defcacb0381a929b53c6e9edce42b90079a49200ee3f3d7a9e1dbcea3e911e203cb0f7dfb2e577a7a360575e72fbafdc9f14b8ba7aee7aa45cc7acd9dbcedc3d0e60dd0b1e871b4be448fc52bbb7684f70b76afbb7d84
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/login:
    post:
      tags:
        - admin
      summary: login
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: admin@admin.com
                password:
                  type: string
                  example: P@ssw0rd
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /admin/change-old-password:
    post:
      tags:
        - admin
      summary: change old password
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  example: P@ssw0rd
                password:
                  type: string
                  example: P@ssw0rds
                password_confirmation:
                  type: string
                  example: P@ssw0rds
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/influencer/user-profile:
    post:
      tags:
        - influencer > user profile
      summary: update or create
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                  example: tomnjerry
                profile_image:
                  type: string
                  format: binary
                firstname:
                  type: string
                  description: nullable
                middlename:
                  type: string
                  description: nullable
                lastname:
                  type: string
                  description: nullable
                country_id:
                  type: integer
                  example: '147'
                phone_number:
                  type: integer
                  example: '987654321'
                gender:
                  type: string
                  example: male
                country_of_influence[]:
                  type: integer
                  example: '4'
                language[]:
                  type: integer
                  example: '4'
                tag[]:
                  type: string
                  example: tag 4
                short_description:
                  type: string
                  example: short_description
                username:
                  type: string
                  example: tomnjerry
                category[]:
                  type: integer
                  example: '3'
                banner_image:
                  type: string
                  format: binary
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - influencer > user profile
      summary: get
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/influencer/update-country-of-influence:
    post:
      tags:
        - influencer > user profile
      summary: update-country-of-influence
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                country_of_influence[]:
                  type: integer
                  example: '5'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/influencer/update-tag:
    post:
      tags:
        - influencer > user profile
      summary: update tag
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                tag[]:
                  type: string
                  example: tag 4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/influencer/update-language:
    post:
      tags:
        - influencer > user profile
      summary: udpate language
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                language[]:
                  type: integer
                  example: '4'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/influencer/update-agency:
    post:
      tags:
        - influencer > user profile
      summary: update agency
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: tomnjerry
                address:
                  type: string
                  description: nullable
                  example: asdfasdf
                join_date:
                  type: string
                  description: nullable
                  example: '2022-01-01'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/influencer/user-category:
    post:
      tags:
        - influencer > category
      summary: udpate
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                category[]:
                  type: integer
                  example: '3'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - influencer > category
      summary: get
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/influencer/initial-price:
    post:
      tags:
        - influencer > initial price
      summary: update or create initial price
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                initial_price[0][channel_content_id]:
                  type: integer
                  example: '1'
                initial_price[0][price]:
                  type: number
                  example: '1500.00'
                initial_price[1][channel_content_id]:
                  type: integer
                  example: '2'
                initial_price[1][price]:
                  type: number
                  example: '1600.00'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - influencer > initial price
      summary: get all initial price
      security:
        - bearerAuth: []
      parameters:
        - name: paginate
          in: query
          schema:
            type: string
          description: nullable, 1 to paginate
        - name: page
          in: query
          schema:
            type: string
          description: nullable, default 1
        - name: limit
          in: query
          schema:
            type: string
          description: nullable, default 10
        - name: search_keyword
          in: query
          schema:
            type: string
          description: nullable
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/influencer/initial-price/{channel_content_id}:
    get:
      tags:
        - influencer > initial price
      summary: get single initial price
      security:
        - bearerAuth: []
      parameters:
        - name: channel_content_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/influencer/initial-price/{id}:
    delete:
      tags:
        - influencer > initial price
      summary: delete initial price
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/influencer/package:
    post:
      tags:
        - influencer > package
      summary: create package
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: package 1
                image:
                  type: string
                  format: binary
                description:
                  type: string
                  example: package 3 description
                price:
                  type: number
                  example: '1200.00'
                status:
                  type: string
                  description: nullable, active or inactive
                  example: active
                channel[0][id]:
                  type: integer
                  example: '3'
                channel[0][name]:
                  type: string
                  example: Instagram
                channel[0][channel_content][0][id]:
                  type: integer
                  example: '5'
                channel[0][channel_content][0][name]:
                  type: string
                  example: Reels
                channel[0][channel_content][0][quantity]:
                  type: integer
                  example: '1'
                channel[0][channel_content][1][id]:
                  type: integer
                  example: '6'
                channel[0][channel_content][1][name]:
                  type: string
                  example: Posts
                channel[0][channel_content][1][quantity]:
                  type: integer
                  example: '1'
                channel[1][id]:
                  type: integer
                  example: '1'
                channel[1][name]:
                  type: string
                  example: facebook
                channel[1][channel_content][0][id]:
                  type: integer
                  example: '1'
                channel[1][channel_content][0][quantity]:
                  type: integer
                  example: '1'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - influencer > package
      summary: get all package
      security:
        - bearerAuth: []
      parameters:
        - name: paginate
          in: query
          schema:
            type: string
          description: nullable, 1 to paginate
        - name: page
          in: query
          schema:
            type: string
          description: nullable, default 1
        - name: limit
          in: query
          schema:
            type: string
          description: nullable, default 10
        - name: search_keyword
          in: query
          schema:
            type: string
          description: nullable
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/influencer/package/{slug}:
    post:
      tags:
        - influencer > package
      summary: update package
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                _method:
                  type: string
                  example: patch
                title:
                  type: string
                  example: package 1
                description:
                  type: string
                  example: package 3 description edit
                price:
                  type: number
                  example: '1100.00'
                status:
                  type: string
                  example: active
                channel[0][id]:
                  type: integer
                  description: >-
                    nullable, 1 for active, 2 for inactive. if null status_id =
                    1
                  example: '1'
                channel[0][name]:
                  type: string
                  example: Facebook
                channel[0][channel_content][0][id]:
                  type: integer
                  example: '1'
                channel[0][channel_content][0][name]:
                  type: string
                  example: Post
                channel[0][channel_content][0][quantity]:
                  type: integer
                  example: '11'
                channel[0][channel_content][1][id]:
                  type: integer
                  example: '2'
                channel[0][channel_content][1][name]:
                  type: string
                  example: Reels
                channel[0][channel_content][1][quantity]:
                  type: integer
                  example: '11'
                image:
                  type: string
                  format: binary
      security:
        - bearerAuth: []
      parameters:
        - name: slug
          in: path
          schema:
            type: string
          required: true
          example: package-1-1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - influencer > package
      summary: get single package
      security:
        - bearerAuth: []
      parameters:
        - name: slug
          in: path
          schema:
            type: string
          required: true
          example: package-1-1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - influencer > package
      summary: delete package
      security:
        - bearerAuth: []
      parameters:
        - name: slug
          in: path
          schema:
            type: string
          required: true
          example: package-1-1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /login:
    post:
      tags:
        - business
      summary: login
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: dummysharedmail@gmail.com
                password:
                  type: string
                  example: P@ssw0rd
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /social-login/{provider_name}:
    post:
      tags:
        - business
      summary: social login
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: '{{google_token}}'
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: provider_name
          in: path
          schema:
            type: string
          required: true
          example: google
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /influencer/social-login/{provider_name}:
    post:
      tags:
        - influencer
      summary: social signup
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: '{{google_token}}'
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: provider_name
          in: path
          schema:
            type: string
          required: true
          example: google
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /influencer/refresh-token/{refresh_token}:
    post:
      tags:
        - influencer
      summary: refresh token
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      security:
        - noauthAuth: []
      parameters:
        - name: refresh_token
          in: path
          schema:
            type: string
          required: true
          example: >-
            def5020017d0f17ef013e5c9e3e3ca4631505bb490d10e949268b9dd7a06ca117cbd1419def6d121a6bcebbeb45d854845c4b7c0219030030eb8ed9dd42d450ac69dc0f0cf19d3bf1bb677879f86940c07d224b2fd1fa3b07996fe224e819d33ad080e7632cee966ec5818b851b6559526c45b41d7c2fdbf7b32ae96a7f3c091e4a65399ce1912335c2a5177d18c20386577a1b2629e774f4799f98ee66b35d53c8e153c50ca159d0bb1efc75caa5daa5378c3308164d89f07d9e751c29dca62f092d4545773d5af162566152ff10aee3adea23abcdd146a6e8de6598be304e9e9a340d195690f009de21bec60941fc4b4b777c0e16e3832fe90dbeb25ded2414db186904252631026ead363829c34b7ee9c64433fffc9109d0f23c0353cdb3223c55e1e3e509fca8f57a8ed650855cf01c2e2d7cf755afb72112158160dcf354344b155a8bf932d6dd34c00438bc65b69a997dac0376f43259ad67d43548ba31265a61c
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /influencer/register:
    post:
      tags:
        - influencer
      summary: register
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Leon Schiffer
                email:
                  type: string
                  example: leon.schiffer360@gmail.com
                password:
                  type: string
                  example: P@ssw0rd
                password_confirmation:
                  type: string
                  example: P@ssw0rd
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /influencer/resend-account-verification-mail:
    post:
      tags:
        - influencer
      summary: resend email verification mail
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /influencer/reset-password-mail:
    post:
      tags:
        - influencer
      summary: send reset password mail
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: influencer@influencer.com
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /influencer/reset-password:
    post:
      tags:
        - influencer
      summary: reset password
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: P@ssw0rd
                password_confirmation:
                  type: string
                  example: P@ssw0rd
                token:
                  type: string
                  example: >-
                    ECbF0LBN3AtzaTYSkXnZAovwQgqS8l7bisXuUxshh7jjUqGYLdS1e7LMItyqiFi7
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /influencer/change-old-password:
    post:
      tags:
        - influencer
      summary: change old password
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  example: P@ssw0rd
                password:
                  type: string
                  example: P@ssw0rds
                password_confirmation:
                  type: string
                  example: P@ssw0rds
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /business/user-profile:
    post:
      tags:
        - business > user profile
      summary: update or create
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                  example: tomnjerry
                email:
                  type: string
                  example: business@business.com
                profile_image:
                  type: string
                  format: binary
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - business > user profile
      summary: get
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /business/social-login/{provider_name}:
    post:
      tags:
        - business
      summary: social signup
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: '{{google_token}}'
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: provider_name
          in: path
          schema:
            type: string
          required: true
          example: google
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /business/refresh-token/{refresh_token}:
    post:
      tags:
        - business
      summary: refresh token
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      security:
        - noauthAuth: []
      parameters:
        - name: refresh_token
          in: path
          schema:
            type: string
          required: true
          example: >-
            def50200cef5fee59be4118424de9ea0d4eb258eca3597d485bc24ca92ae7dbd4a61ba089b8ee83a8910551728225da27d1167c28f2235f5dfe8250e16dcf335f7a92f4567e7a4a1082cfe83ee6323c583c344d87c78b845857984e21a15893e7f064ac58dddc21cff4837623773b6dd10a83d4b066042c106bfc9324ac94ff028fd2420378bb65afa531a4a356dd47fdd76d60bc4ccc7162d86b4dfe6e975ab110ea0ca29c209e0814766e19035128c8ac366adfa668dbefd1e61ee360b0adf8b79041c864a3cc6c7e0dc8c113880f647e8d9603cde8b95560cbbe511c3506239c2db98b5683b374782658b7b4e499bd0365a5df720fde4d676e6219f4fca96faadabe542bbc2322ffaa1a558a761ac5703cb2cf30f77f96b8b5ac00d2022c9cb7182873468db7d9d527c869c80c6f002dd82664ab2ee99f2f13d433e44dcadac3e8240c4fc09118f95b85a26f0055f07fdd412eea3f3b8d8cb9869b5c89bff6ce5b684
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /business/register:
    post:
      tags:
        - business
      summary: register
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: tomnjerry
                email:
                  type: string
                  example: tomnjerry8963@gmail.com
                password:
                  type: string
                  example: P@ssw0rd
                password_confirmation:
                  type: string
                  example: P@ssw0rd
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /business/set-password:
    post:
      tags:
        - business
      summary: set password
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: P@ssw0rd
                password_confirmation:
                  type: string
                  example: P@ssw0rd
                token:
                  type: string
                  example: >-
                    YCdb4OYRmQYUPdHUhvGyYybMJv03L2NSbFIJtJAQjVJBGXIhBGdvZNij8XV6XJPw
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /business/reset-password-mail:
    post:
      tags:
        - business
      summary: send reset password mail
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: tomnjerry8963@gmail.com
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /business/reset-password:
    post:
      tags:
        - business
      summary: reset password
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: P@ssw0rd
                password_confirmation:
                  type: string
                  example: P@ssw0rd
                token:
                  type: string
                  example: >-
                    3vMvM4QR4X2XNmdSlHL8BOLaqSdP89dTsmmKuRZEr9xA8WfLNpmOkihbpaHXRNEz
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /business/change-old-password:
    post:
      tags:
        - business
      summary: change old password
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  example: P@ssw0rd
                password:
                  type: string
                  example: P@ssw0rds
                password_confirmation:
                  type: string
                  example: P@ssw0rds
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/channel:
    get:
      tags:
        - public > channel
      summary: get active channels
      security:
        - noauthAuth: []
      parameters:
        - name: paginate
          in: query
          schema:
            type: string
          description: nullable, 1 to paginate
        - name: page
          in: query
          schema:
            type: string
          description: 'nullable, default 1 '
        - name: limit
          in: query
          schema:
            type: string
          description: nullable, default 10
        - name: search_keyword
          in: query
          schema:
            type: string
          description: nullable
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/channel/{channel_id}:
    get:
      tags:
        - public > channel
      summary: find single channel
      security:
        - noauthAuth: []
      parameters:
        - name: channel_id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/channel-content:
    get:
      tags:
        - public > channel content
      summary: get all active
      security:
        - bearerAuth: []
      parameters:
        - name: paginate
          in: query
          schema:
            type: string
          description: nullable, 1 to paginate
        - name: page
          in: query
          schema:
            type: string
          description: nullable, default 1
        - name: limit
          in: query
          schema:
            type: string
          description: nullable, default 10
        - name: search_keyword
          in: query
          schema:
            type: string
          description: nullable
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/category-with-sub:
    get:
      tags:
        - public
      summary: category with subcategory
      parameters:
        - name: paginate
          in: query
          schema:
            type: string
          description: nullable, 1 to paginate
        - name: page
          in: query
          schema:
            type: string
          description: 'nullable, default 1 '
        - name: limit
          in: query
          schema:
            type: string
          description: nullable, default 10
        - name: search_keyword
          in: query
          schema:
            type: string
          description: nullable
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/currency:
    get:
      tags:
        - public
      summary: get all currency
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/language:
    get:
      tags:
        - public
      summary: get all language
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/country:
    get:
      tags:
        - public
      summary: get all country
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/tag:
    get:
      tags:
        - public
      summary: get all tag
      security:
        - bearerAuth: []
      parameters:
        - name: paginate
          in: query
          schema:
            type: string
          description: nullable, 1 to paginate
        - name: page
          in: query
          schema:
            type: string
          description: 'nullable, default 1 '
        - name: limit
          in: query
          schema:
            type: string
          description: nullable, default 10
        - name: search_keyword
          in: query
          schema:
            type: string
          description: nullable
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/:
    get:
      tags:
        - default
      summary: test
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
